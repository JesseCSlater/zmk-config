/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;
};

&lt {
    /* flavor = "balanced"; */
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

&sk {
    release-after-ms = <250>;
};

/ {
        behaviors {
            gqt: global-quick-tap {
                compatible = "zmk,behavior-hold-tap";
                label = "GLOBAL_QUICK_TAP";
                #binding-cells = <2>;
                flavor = "tap-preferred";
                tapping-term-ms = <200>;
                quick-tap-ms = <300>;
                global-quick-tap;
                bindings = <&kp>, <&kp>;
            };
        };
        
        combos {
           compatible = "zmk,combos";

           combo_Z {
              timeout-ms = <20>;
              key-positions = <2 3>;
              bindings = <&kp Z>;
           };

           combo_Q {
              timeout-ms = <20>;
              key-positions = <3 4>;
              bindings = <&kp Q>;
           };
                      
           combo_X {
              timeout-ms = <20>;
              key-positions = <14 15>;
              bindings = <&kp X>;
           };
           
           combo_J {
              timeout-ms = <20>;
              key-positions = <15 16>;
              bindings = <&kp J>;
           };
           
           combo_escape {
              timeout-ms = <20>;
              key-positions = <27 28>;
              bindings = <&kp ESC>;
           };

           combo_colon {
              timeout-ms = <20>;
              key-positions = <7 8>;
              bindings = <&kp COLON>;
           };
           
            combo_semicolon {
              timeout-ms = <20>;
              key-positions = <8 9>;
              bindings = <&kp SEMI>;
           };
           
           combo_minus {
              timeout-ms = <20>;
              key-positions = <19 20>;
              bindings = <&kp MINUS>;
           };

           combo_qmark {
              timeout-ms = <20>;
              key-positions = <20 21>;
              bindings = <&kp QMARK>;
           };

           combo_underscore {
              timeout-ms = <20>;
              key-positions = <31 32>;
              bindings = <&kp UNDER>;
           };
           
           combo_exlamation {
              timeout-ms = <20>;
              key-positions = <32 33>;
              bindings = <&kp EXCL>;
           };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <LOWER RAISE>;
                then-layer = <ADJUST>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &key_repeat      &kp W      &kp F       &kp P        &kp B         &kp K         &kp L       &kp U        &kp Y      &kp APOS  &none
   &none &gqt LSHIFT A &gqt LALT R &gqt LCTRL S &gqt LGUI T   &kp G         &kp M         &gqt RGUI N  &gqt RCTRL E  &gqt LALT I &gqt RSHIFT O     &none
   &none &key_repeat  &gqt RALT V &kp C       &kp D        &none         &none         &kp H       &kp COMMA    &gqt RALT DOT    &kp APOS  &none
                               &mo LWR &kp SPACE &none     &none &sk LSHIFT &mo RSE
                        >;
                };
                lower_layer {
                        bindings = <
   &none &none   &bt BT_SEL 1       &bt BT_SEL 2   &bt BT_SEL 3      &out OUT_TOG       &kp C_MENU     &kp HOME       &kp PG_DN &kp PG_UP      &kp END      &none
   &none &kp LSHIFT &kp LALT &kp LCTRL &kp LGUI  &none         &kp DEL     &kp LEFT &kp DOWN  &kp UP &kp RIGHT &none
   &none &bt BT_SEL 0   &kp RALT &none       &none       &none         &none     &sk BSPC        &kp RET        &kp TAB      &kp END      &none
                               &mo LWR &kp SPACE &none     &none &sk LSHIFT &mo RSE
                        >;
                };
                raise_layer {
                        bindings = <
   &none &kp GRAVE &kp LBRC   &kp LBKT      &kp  LPAR      &kp PIPE        &kp AMPS   &kp RPAR         &kp RBKT       &kp RBRC         &kp TILDE    &none
   &none &mt LSHIFT N1 &mt LALT N2 &mt LCTRL N3   &mt LGUI N4    &kp BSLH         &kp FSLH &mt RGUI N7 &mt RCTRL N8 &mt LALT N9 &mt RSHIFT N0   &none
   &none &kp GRAVE   &mt RALT PLUS &kp EQUAL       &kp N5        &none         &none &kp N6      &kp CARET    &mt RALT STAR   &kp TILDE &none
                               &mo LWR &kp SPACE &none     &none &sk LSHIFT &mo RSE
                        >;
                };
                adjust_layer {
                        bindings = <
   &none &none  &kp C_PP   &kp C_VOL_UP    &kp C_BRI_UP    &bt BT_CLR         &kp F12         &kp F7   &kp F8   &kp F9      &kp F10   &none
   &none &kp LSHIFT     &kp LALT        &kp LCTRL       &kp LGUI        &bootloader     &bootloader   &kp F4   &kp F5   &kp F6      &kp F11   &none
   &none &none  &kp RALT  &kp C_VOL_DN    &kp C_BRI_DN    &none    &none    &kp F1   &kp F2  &kp F3     &kp F10  &none
                               &mo LWR &kp SPACE &none     &none &sk LSHIFT &mo RSE
                        >;
                };
        };
};
