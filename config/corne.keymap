/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define DEFAULT 0
#define LOWER   1
#define RAISE   2
#define ADJUST  3
#define LWR LOWER
#define RSE RAISE
#define ADJ ADJUST

&mt {
    flavor = "tap-preferred";
    tapping-term-ms = <250>;
    quick_tap_ms = <180>;
};

&lt {
    /* flavor = "balanced"; */
    quick_tap_ms = <200>;
    tapping-term-ms = <180>;
};

/ {
        combos {
           compatible = "zmk,combos";
           combo_lpar {
              timeout-ms = <50>;
              key-positions = <25 26>;
              bindings = <&kp LPAR>;
           };

           combo_rpar {
              timeout-ms = <50>;
              key-positions = <33 34>;
              bindings = <&kp RPAR>;
           };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";
            tri_layer {
                if-layers = <LOWER RAISE>;
                then-layer = <ADJUST>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
                        bindings = <
   &none &kp Q      &kp W      &kp F       &kp P        &kp B         &kp J         &kp L       &kp U        &kp Y      &kp SQT  &none
   &none &mt LSHIFT A &mt RALT R &mt LCTRL S &mt LGUI T   &kp G         &kp M         &mt RGUI N  &mt RCTRL E  &mt RALT I &mt RSHIFT O     &none
   &none &kp Z      &mt LALT X &kp C       &kp D        &kp V         &kp K         &kp H       &kp COMMA    &mt LALT DOT    &kp SEMI  &none
                               &kp TAB &kp SPACE &mt LWR ESC     &kp BSPC &kp RSHIFT &mo RSE
                        >;
                };
                raise_layer {
                        bindings = <
   &none &kp EXCL   &kp LBRC   &kp LBKT      &kp LPAR       &kp PIPE        &kp AMPS   &kp RPAR         &kp RBKT       &kp RBRC         &kp QMARK    &none
   &none &mt LSHIFT N1 &mt RALT N2 &mt LCTRL N3   &mt LGUI N4    &kp BSLH         &kp FSLH &mt RGUI N7 &mt RCTRL N8 &mt RALT N9 &MT RSHIFT N0   &none
   &none &kp GRAVE   &mt TILDE PRCNT &kp CARET       &kp N5        &kp PLUS         &kp ASTRK &kp N6      &kp UNDER    &mt LALT MINUS   &kp EQUAL &none
                               &kp TAB &kp SPACE &mt LWR ESC     &kp BSPC &kp RSHIFT &mt RSE RET
                        >;
                };
                lower_layer {
                        bindings = <
   &none &kp EXCL    &kp AT      &kp HASH     &kp DLLR     &kp PRCNT       &kp CARET     &kp AMPS        &kp KP_MULTIPLY &kp LPAR      &kp RPAR      &none
   &none &mt LCMD F1 &mt RALT F2 &mt LCTRL F3 &mt LSHFT F4 &kp F5          &kp MINUS     &mt RSHFT EQUAL &mt RCTRL LBKT  &mt RALT RBKT &mt RCMD BSLH &none
   &none &kp F6      &mt LALT F7 &kp F8       &kp F9       &kp F10         &kp UNDER     &kp PLUS        &kp LBRC        &kp RBRC      &kp PIPE      &none
                                 &lt RSE ESC  &mo LWR      &kp GRAVE       &mt RSHFT RET &lt RSE BSPC    &lt LWR TAB
                        >;
                };
                adjust_layer {
                        bindings = <
   &none &bt BT_CLR   &none        &none        &none        &none            &none           &kp K_MUTE   &none &none &bootloader &none
   &none &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &kp C_BRI_UP    &kp C_VOL_UP &none &none &reset      &none
   &none &none        &none        &none        &none        &none            &kp C_BRI_DN    &kp C_VOL_DN &none &none &none       &none
                                   &none        &none        &none            &none           &none        &none
                        >;
                };
        };
};
